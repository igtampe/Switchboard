using System;

namespace Igtampe.Switchboard.Server {
    /// <summary>Holds a Switchboard User</summary>
    public class SwitchboardUser {

        private readonly string Username;

        /// <summary>Password of this user</summary>
        protected string Password;

        /// <summary>Permission level of this user. <br></br>
        /// Used to check if a user has a minimum required permission level to execute a command.</summary>
        protected int PermissionLevel;

        private bool Online;
        private string LastOnline;

        /// <summary>Generates a user</summary>
        public SwitchboardUser(string Username,string Password,int PermissionLevel,string LastOnline) {
            this.Username = Username;
            this.Password = Password;
            this.PermissionLevel = PermissionLevel;
            this.LastOnline = LastOnline;
        }

        /// <summary>Generates a User by using a UserString</summary>
        /// <param name="UserString">A UserString (generated by using User.ToString())</param>
        public SwitchboardUser(string UserString) {
            string[] Split = UserString.Split('~');
            if(Split.Length != 4) { throw new ArgumentException("UserString was not of length 4: " + UserString); }

            Username = Split[0];
            Password = Split[1];
            PermissionLevel = int.Parse(Split[2]);
            LastOnline = Split[3];
        }

        /// <summary>Retrieves the username of this user</summary>
        public string GetUsername() { return Username; }

        /// <summary>
        /// Retreives the last time this user was online. 
        /// If the user is online, it shows the last time he went offline.
        /// </summary>
        public string GetLastOnline() { return LastOnline; }
        
        /// <summary>Retreives the permission level of this user</summary>
        public int GetPLevel() { return PermissionLevel; }

        /// <summary>Verifies the given password with the actual password of this user</summary>
        /// <param name="Password">Password to verify</param>
        /// <returns>True if the password matches the one on record, false otherwise</returns>
        public bool VerifyPassword(string Password) { return this.Password == Password; }

        /// <summary>Verifies if a user can run a certain command with the required permission level</summary>
        /// <param name="RequiredPermissionLevel">Permission level of the command you want to verify if this user can run</param>
        /// <returns>True if the user matches or exceeds the specified permission level, false otherwise</returns>
        public bool CanExecute(int RequiredPermissionLevel) { return PermissionLevel >= RequiredPermissionLevel; }


        /// <summary>Sets the password of the current user</summary>
        /// <param name="CurrentPassword">Current password for verification purposes</param>
        /// <param name="NewPassword">New User's Password</param>
        /// <returns>True if the password was able to be replaced, false otherwise</returns>
        public bool SetPassword(string CurrentPassword,string NewPassword) {
            if(Password != CurrentPassword) { return false; }
            Password = NewPassword;
            return true;
        }

        /// <summary>Function to check if the user is online</summary>
        public bool IsOnline() { return Online; }

        /// <summary>Function to set a user as online or offline. If the user is set to offline, it updates the user's info</summary>
        public void SetOnline(bool Onl) {
            Online = Onl;
            if(!Onl) { LastOnline = DateTime.Now.ToString(); }
        }

        /// <summary>Generates a string that can be used to *save* this user.</summary>
        /// <returns>A string that represents this user</returns>
        public override string ToString() { return string.Join("~",Username,Password,PermissionLevel,LastOnline); }

    }


}
